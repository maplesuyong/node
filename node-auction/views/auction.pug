extends layout

block good
  h2= good.name
  div='등록자:' + good.owner.nick
  div='시작가:' + good.price +'원'
  strong#time(data-start=good.createdAt data-end=good.end)
  img#good-img(src='/img/' + good.img)
  
block content
  .timeline
    #bid
      for bid in auction
        div
          span= bid.user.nick +'님:'
          strong= bid.bid +'원에 입찰하셨습니다.'
          if bid.msg
            span='(' + bid.msg +')'
    form#bid-form
      input(type='number' name='bid' placeholder='입찰가' required min=good.price)
      input(type='msg' name='msg' placeholder='메시지(선택사항)' maxlength='100')
      button.btn(type='submit') 입찰
    if auctionError
      .error-message= auctionError
  script(src='https://unpkg.com/axios/dist/axios.min.js')
  //- EventSource polyfill 스크립트
  script(src='https://unpkg.com/event-source-polyfill/src/eventsource.min.js')
  //- Socket.IO 클라이언트 스크립트
  script(src='/socket.io/socket.io.js')
  script.
    // 입찰 시 POST /good/:id/bid로 요청을 보내는 form 제출
    document.querySelector('#bid-form').addEventListener('submit', function (e) {
      e.preventDefault();
      var xhr = new XMLHttpRequest();
      var errorMessage = document.querySelector('.error-message');
      xhr.onload = function () {
        if (xhr.status === 200) {
          e.target.bid.value ='';
          e.target.msg.value ='';
          errorMessage.textContent ='';
        } else {
          console.error(xhr.responseText);
          e.target.bid.value ='';
          e.target.msg.value ='';
          errorMessage.textContent = xhr.responseText
        }
      };
      xhr.open('POST','/good/#{good.id}/bid');
      xhr.setRequestHeader('Content-Type','application/json');
      xhr.send(JSON.stringify({
        bid: e.target.bid.value,
        msg: e.target.msg.value,
      }));
    });

    // 서버센트 이벤트 데이터로 서버 시간을 받아 카운트다운
    var es = new EventSource("/sse");
    var time = document.querySelector('#time');
    es.onmessage = function (e) {
      var end = new Date(time.dataset.start);
      var server = new Date();
      end.setHours(end.getHours() + parseInt(time.dataset.end));
      if (server >= end) {
        return time.textContent ='00:00:00';
      } else {
        var t = end - server;
        var seconds = ('0' + Math.floor((t / 1000) % 60)).slice(-2);
        var minutes = ('0' + Math.floor((t / 1000 / 60) % 60)).slice(-2);
        var hours = ('0' + Math.floor((t / (1000 * 60 * 60)) % 24)).slice(-2);
        return time.textContent = hours +':' + minutes +':' + seconds;
      }
    };

    // 다른 사람이 입찰했을 때 Socket.IO로 입찰 정보를 렌더링한다
    var socket = io.connect('http://localhost:8010', {
      path:'/socket.io'
    });
    socket.on('bid', function (data) {
      var div = document.createElement('div');
      var span = document.createElement('span');
      span.textContent = data.nick +'님:';
      var strong = document.createElement('strong');
      strong.textContent = data.bid +'원에 입찰하셨습니다.';
      div.appendChild(span);
      div.appendChild(strong);
      if (data.msg) {
        span = document.createElement('span');
        span.textContent ='(' + data.msg +')';
        div.appendChild(span);
      }
      document.querySelector('#bid').appendChild(div);
    });