extends layout

block content
  h1= query +' 검색 결과(' + results.length +')'
    #map
    //- 검색 결과를 렌더링
    script.   
      var positions = [];
    for result in results
      script.
        positions.push({
          lat: #{result.geometry.location.lat},
          lng: #{result.geometry.location.lng},
          name:'#{result.name}',
          id:'#{result.place_id}'
        });
    script.
      // new google.maps.Map(태그, 옵션) : 지도를 렌더링
      function initMap() {
        // positions(검색 결과)가 있다면, positions[0](첫번째 검색 결과)를 중심으로 설정
        // 없다면, 서울시의 위도(37.540705)와 경도(126.956764)를 중심으로 설정
        var center = positions[0] || { lat: 37.540705, lng: 126.956764 };
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 13,   // 확대 정도
          center: center  // 지도의 중심 좌표
        });
        // 검색 결과가 있을 때 지도에 마커를 표시하는 방법
        positions.forEach(function(pos) {
          // 마커 표시
          var marker = new google.maps.Marker({
            position: { lat: pos.lat, lng: pos.lng },
            map: map,   // 마커를 표시할 지도
            title: pos.name   // 마커에 마우스를 올렸을 때 표시할 툴팁 메시지를 설정
          });
          var div = document.createElement('div');
          var h1 = document.createElement('h1');
          var button = document.createElement('button');
          h1.textContent = pos.name;
          button.classList.add('btn');
          button.textContent ='즐겨찾기 추가';
          button.onclick = function() {
            var xhr = new XMLHttpRequest();
            xhr.onload = function() {
              if (xhr.status === 200) {
                location.href ='/';
              }
            };
            xhr.open('POST','/location/' + pos.id +'/favorite');
            xhr.setRequestHeader('Content-Type','application/json');
            xhr.send(JSON.stringify({
              name: pos.name,
              lat: pos.lat,
              lng: pos.lng
            }));
          };
          div.appendChild(h1);
          div.appendChild(button);
          // 정보창을 띄우는 코드
          var infowindow = new google.maps.InfoWindow({
            content: div
          });
          marker.addListener('click', function () {
            infowindow.open(map, marker);
          });
        });
      }
      // 구글 지도 관련 스크립트를 불러오는 태그
      // 쿼리스트링으로 앞에서 발급받은 API 키와 initMap 콜백 함수를 지정
      script(async defer src="https://maps.googleapis.com/maps/api/js" + "?key=AIzaSyDaF4Pzmqg5oVAaC4iMIrZVeyq42bAKHhU&callback=initMap")